{"version":3,"file":"static/js/366.a523e45b.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-05-movies/./src/components/searchForm/SearchForm.module.css?1aef","components/searchForm/SearchForm.jsx","pages/Movies.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"heading\":\"SearchForm_heading__MBcJC\",\"input\":\"SearchForm_input__a6uEo\",\"button\":\"SearchForm_button__sXC26\"};","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './SearchForm.module.css';\n\nexport const SearchForm = ({ value, onSubmit }) => {\n  const [inputValue, setInputValue] = useState(value);\n\n  const handleChange = e => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (onSubmit) {\n      onSubmit(inputValue);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <h2 className={styles.heading}>Movie Search:</h2>\n      <input\n        type=\"text\"\n        value={inputValue}\n        onChange={handleChange}\n        placeholder=\"Search movies...\"\n        className={styles.input}\n      />\n      <button type=\"submit\" className={styles.button}>\n        Search\n      </button>\n    </form>\n  );\n};\n\nSearchForm.propTypes = {\n  value: PropTypes.string,\n  handleChange: PropTypes.func,\n  onSubmit: PropTypes.func,\n};\n","import React, { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { handleSearch } from '../services/api';\nimport { SearchForm } from '../components/searchForm/SearchForm';\nimport MovieList from '../components/movieList/MovieList';\nimport Loader from '../components/Loader';\n\n\nconst Movies = () => {\n  const [searchResults, setSearchResults] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const movieName = searchParams.get('query') || '';\n  const [loading, setLoading] = useState(false);\n  const [noResults, setNoResults] = useState(false);\n\n  const updateQueryString = query => {\n    setSearchParams({ query });\n  };\n\n  const performSearch = async query => {\n    try {\n      setLoading(true);\n\n      // Introduce o întârziere de 1 secunda:\n      await new Promise(resolve => setTimeout(resolve, 750));\n\n      const movies = await handleSearch(query);\n      setSearchResults(movies);\n\n      if (movies.length === 0) {\n        setNoResults(true);\n      } else {\n        setNoResults(false);\n      }\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Efectul va fi declanșat doar când se schimbă `movieName`\n  useEffect(() => {\n    const performSearchEffect = async () => {\n      if (movieName !== '') {\n        performSearch(movieName);\n      } else {\n        // Dacă câmpul de căutare este gol, putem decide cum să gestionăm situația.\n        setSearchResults([]);\n        setNoResults(false);\n      }\n    };\n\n    performSearchEffect();\n  }, [movieName]);\n\n  const handleSearchSubmit = async query => {\n    performSearch(query);\n  };\n\n  return (\n    <div>\n      <SearchForm\n        value={movieName}\n        onChange={updateQueryString}\n        onSubmit={handleSearchSubmit}\n      />\n      {loading ? (\n        <Loader />\n      ) : noResults ? (\n        <h3>No movie with this name. Try something else.</h3>\n      ) : (\n        <MovieList films={searchResults} />\n      )}\n      {/* Utilizarea MovieList pentru afișarea listei de filme */}\n    </div>\n  );\n};\n\nexport default Movies;\n"],"names":["SearchForm","_ref","value","onSubmit","_useState","useState","_useState2","_slicedToArray","inputValue","setInputValue","_jsxs","e","preventDefault","children","_jsx","className","styles","type","onChange","target","placeholder","searchResults","setSearchResults","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","setSearchParams","movieName","get","_useState3","_useState4","loading","setLoading","_useState5","_useState6","noResults","setNoResults","performSearch","_asyncToGenerator","_regeneratorRuntime","_callee","query","movies","_context","prev","next","Promise","resolve","setTimeout","handleSearch","sent","length","t0","console","error","finish","stop","_x","apply","arguments","useEffect","performSearchEffect","_ref2","_callee2","_context2","handleSearchSubmit","_ref3","_callee3","_context3","_x2","Loader","MovieList","films"],"sourceRoot":""}